<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="991"><g><title>perf-exec (5 samples, 0.50%)</title><rect x="0.0000%" y="661" width="0.5045%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.50%)</title><rect x="0.0000%" y="645" width="0.5045%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50"></text></g><g><title>do_syscall_64 (5 samples, 0.50%)</title><rect x="0.0000%" y="629" width="0.5045%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.50%)</title><rect x="0.0000%" y="613" width="0.5045%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.50%)</title><rect x="0.0000%" y="597" width="0.5045%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="607.50"></text></g><g><title>bprm_execve (5 samples, 0.50%)</title><rect x="0.0000%" y="581" width="0.5045%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="591.50"></text></g><g><title>load_elf_binary (5 samples, 0.50%)</title><rect x="0.0000%" y="565" width="0.5045%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="575.50"></text></g><g><title>begin_new_exec (5 samples, 0.50%)</title><rect x="0.0000%" y="549" width="0.5045%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50"></text></g><g><title>perf_event_exec (5 samples, 0.50%)</title><rect x="0.0000%" y="533" width="0.5045%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.10%)</title><rect x="0.5045%" y="645" width="0.1009%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="1"/><text x="0.7545%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.10%)</title><rect x="0.5045%" y="629" width="0.1009%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="1"/><text x="0.7545%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.10%)</title><rect x="0.5045%" y="613" width="0.1009%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="0.7545%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.10%)</title><rect x="0.5045%" y="597" width="0.1009%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="1"/><text x="0.7545%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.10%)</title><rect x="0.5045%" y="581" width="0.1009%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="1"/><text x="0.7545%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.10%)</title><rect x="0.5045%" y="565" width="0.1009%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="0.7545%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.10%)</title><rect x="0.5045%" y="549" width="0.1009%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.7545%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.10%)</title><rect x="0.5045%" y="533" width="0.1009%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.7545%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.10%)</title><rect x="0.5045%" y="517" width="0.1009%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.7545%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.10%)</title><rect x="0.5045%" y="501" width="0.1009%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="0.7545%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="0.5045%" y="485" width="0.1009%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.7545%" y="495.50"></text></g><g><title>do_syscall_64 (1 samples, 0.10%)</title><rect x="0.5045%" y="469" width="0.1009%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="0.7545%" y="479.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.10%)</title><rect x="0.5045%" y="453" width="0.1009%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="0.7545%" y="463.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.10%)</title><rect x="0.5045%" y="437" width="0.1009%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="0.7545%" y="447.50"></text></g><g><title>do_mmap (1 samples, 0.10%)</title><rect x="0.5045%" y="421" width="0.1009%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="0.7545%" y="431.50"></text></g><g><title>mmap_region (1 samples, 0.10%)</title><rect x="0.5045%" y="405" width="0.1009%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="0.7545%" y="415.50"></text></g><g><title>mas_preallocate (1 samples, 0.10%)</title><rect x="0.5045%" y="389" width="0.1009%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="1"/><text x="0.7545%" y="399.50"></text></g><g><title>mas_alloc_nodes (1 samples, 0.10%)</title><rect x="0.5045%" y="373" width="0.1009%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="0.7545%" y="383.50"></text></g><g><title>kmem_cache_alloc_bulk (1 samples, 0.10%)</title><rect x="0.5045%" y="357" width="0.1009%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="0.7545%" y="367.50"></text></g><g><title>memcg_slab_post_alloc_hook (1 samples, 0.10%)</title><rect x="0.5045%" y="341" width="0.1009%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="0.7545%" y="351.50"></text></g><g><title>&lt;R as num_bigint::bigrand::RandBigInt&gt;::gen_bigint (1 samples, 0.10%)</title><rect x="0.6054%" y="341" width="0.1009%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="1"/><text x="0.8554%" y="351.50"></text></g><g><title>&lt;R as num_bigint::bigrand::RandBigInt&gt;::gen_biguint (1 samples, 0.10%)</title><rect x="0.6054%" y="325" width="0.1009%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="1"/><text x="0.8554%" y="335.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::fill_bytes (1 samples, 0.10%)</title><rect x="0.6054%" y="309" width="0.1009%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="1"/><text x="0.8554%" y="319.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::fill_bytes (1 samples, 0.10%)</title><rect x="0.6054%" y="293" width="0.1009%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="1"/><text x="0.8554%" y="303.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::fill_bytes (1 samples, 0.10%)</title><rect x="0.6054%" y="277" width="0.1009%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="1"/><text x="0.8554%" y="287.50"></text></g><g><title>rand_core::impls::fill_via_u32_chunks (1 samples, 0.10%)</title><rect x="0.6054%" y="261" width="0.1009%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="1"/><text x="0.8554%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.10%)</title><rect x="0.6054%" y="245" width="0.1009%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="1"/><text x="0.8554%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.10%)</title><rect x="0.6054%" y="229" width="0.1009%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="1"/><text x="0.8554%" y="239.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as core::ops::bit::ShrAssign&lt;usize&gt;&gt;::shr_assign (1 samples, 0.10%)</title><rect x="0.7064%" y="277" width="0.1009%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="0.9564%" y="287.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (1 samples, 0.10%)</title><rect x="0.7064%" y="261" width="0.1009%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="0.9564%" y="271.50"></text></g><g><title>num_bigint::biguint::algorithms::biguint_shr (1 samples, 0.10%)</title><rect x="0.7064%" y="245" width="0.1009%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="1"/><text x="0.9564%" y="255.50"></text></g><g><title>alloc::vec::from_elem (3 samples, 0.30%)</title><rect x="0.9082%" y="213" width="0.3027%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="3"/><text x="1.1582%" y="223.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3 samples, 0.30%)</title><rect x="0.9082%" y="197" width="0.3027%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="3"/><text x="1.1582%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (3 samples, 0.30%)</title><rect x="0.9082%" y="181" width="0.3027%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="3"/><text x="1.1582%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.30%)</title><rect x="0.9082%" y="165" width="0.3027%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="3"/><text x="1.1582%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3 samples, 0.30%)</title><rect x="0.9082%" y="149" width="0.3027%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="3"/><text x="1.1582%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.30%)</title><rect x="0.9082%" y="133" width="0.3027%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="3"/><text x="1.1582%" y="143.50"></text></g><g><title>alloc::alloc::alloc_zeroed (3 samples, 0.30%)</title><rect x="0.9082%" y="117" width="0.3027%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="3"/><text x="1.1582%" y="127.50"></text></g><g><title>__libc_calloc (3 samples, 0.30%)</title><rect x="0.9082%" y="101" width="0.3027%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="3"/><text x="1.1582%" y="111.50"></text></g><g><title>[libc.so.6] (3 samples, 0.30%)</title><rect x="0.9082%" y="85" width="0.3027%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="3"/><text x="1.1582%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.10%)</title><rect x="1.1100%" y="69" width="0.1009%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="1"/><text x="1.3600%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="3.1282%" y="181" width="0.1009%" height="15" fill="rgb(225,35,8)" fg:x="31" fg:w="1"/><text x="3.3782%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.10%)</title><rect x="3.1282%" y="165" width="0.1009%" height="15" fill="rgb(250,213,24)" fg:x="31" fg:w="1"/><text x="3.3782%" y="175.50"></text></g><g><title>num_bigint::biguint::algorithms::adc (1 samples, 0.10%)</title><rect x="3.2291%" y="181" width="0.1009%" height="15" fill="rgb(247,123,22)" fg:x="32" fg:w="1"/><text x="3.4791%" y="191.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as core::ops::arith::Mul&lt;&amp;num_bigint::biguint::BigUint&gt;&gt;::mul (142 samples, 14.33%)</title><rect x="0.8073%" y="261" width="14.3290%" height="15" fill="rgb(231,138,38)" fg:x="8" fg:w="142"/><text x="1.0573%" y="271.50">&lt;num_bigint::biguint::..</text></g><g><title>&lt;&amp;num_bigint::biguint::BigUint as core::ops::arith::Mul&lt;&amp;num_bigint::biguint::BigUint&gt;&gt;::mul (142 samples, 14.33%)</title><rect x="0.8073%" y="245" width="14.3290%" height="15" fill="rgb(231,145,46)" fg:x="8" fg:w="142"/><text x="1.0573%" y="255.50">&lt;&amp;num_bigint::biguint:..</text></g><g><title>num_bigint::biguint::algorithms::mul3 (142 samples, 14.33%)</title><rect x="0.8073%" y="229" width="14.3290%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="142"/><text x="1.0573%" y="239.50">num_bigint::biguint::a..</text></g><g><title>num_bigint::biguint::algorithms::mac3 (138 samples, 13.93%)</title><rect x="1.2109%" y="213" width="13.9253%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="138"/><text x="1.4609%" y="223.50">num_bigint::biguint::..</text></g><g><title>num_bigint::biguint::algorithms::mac_digit (135 samples, 13.62%)</title><rect x="1.5136%" y="197" width="13.6226%" height="15" fill="rgb(247,81,37)" fg:x="15" fg:w="135"/><text x="1.7636%" y="207.50">num_bigint::biguint::..</text></g><g><title>num_bigint::biguint::algorithms::mac_with_carry (117 samples, 11.81%)</title><rect x="3.3300%" y="181" width="11.8063%" height="15" fill="rgb(209,12,38)" fg:x="33" fg:w="117"/><text x="3.5800%" y="191.50">num_bigint::biguin..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.10%)</title><rect x="15.2371%" y="245" width="0.1009%" height="15" fill="rgb(227,1,9)" fg:x="151" fg:w="1"/><text x="15.4871%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.10%)</title><rect x="15.2371%" y="229" width="0.1009%" height="15" fill="rgb(248,47,43)" fg:x="151" fg:w="1"/><text x="15.4871%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.10%)</title><rect x="15.2371%" y="213" width="0.1009%" height="15" fill="rgb(221,10,30)" fg:x="151" fg:w="1"/><text x="15.4871%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="15.3380%" y="181" width="0.1009%" height="15" fill="rgb(210,229,1)" fg:x="152" fg:w="1"/><text x="15.5880%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="15.3380%" y="165" width="0.1009%" height="15" fill="rgb(222,148,37)" fg:x="152" fg:w="1"/><text x="15.5880%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="15.3380%" y="149" width="0.1009%" height="15" fill="rgb(234,67,33)" fg:x="152" fg:w="1"/><text x="15.5880%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="15.3380%" y="133" width="0.1009%" height="15" fill="rgb(247,98,35)" fg:x="152" fg:w="1"/><text x="15.5880%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="15.3380%" y="117" width="0.1009%" height="15" fill="rgb(247,138,52)" fg:x="152" fg:w="1"/><text x="15.5880%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="15.3380%" y="101" width="0.1009%" height="15" fill="rgb(213,79,30)" fg:x="152" fg:w="1"/><text x="15.5880%" y="111.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="15.3380%" y="85" width="0.1009%" height="15" fill="rgb(246,177,23)" fg:x="152" fg:w="1"/><text x="15.5880%" y="95.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.20%)</title><rect x="15.3380%" y="245" width="0.2018%" height="15" fill="rgb(230,62,27)" fg:x="152" fg:w="2"/><text x="15.5880%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.20%)</title><rect x="15.3380%" y="229" width="0.2018%" height="15" fill="rgb(216,154,8)" fg:x="152" fg:w="2"/><text x="15.5880%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.20%)</title><rect x="15.3380%" y="213" width="0.2018%" height="15" fill="rgb(244,35,45)" fg:x="152" fg:w="2"/><text x="15.5880%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.20%)</title><rect x="15.3380%" y="197" width="0.2018%" height="15" fill="rgb(251,115,12)" fg:x="152" fg:w="2"/><text x="15.5880%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.10%)</title><rect x="15.4390%" y="181" width="0.1009%" height="15" fill="rgb(240,54,50)" fg:x="153" fg:w="1"/><text x="15.6890%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.10%)</title><rect x="15.4390%" y="165" width="0.1009%" height="15" fill="rgb(233,84,52)" fg:x="153" fg:w="1"/><text x="15.6890%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.10%)</title><rect x="15.4390%" y="149" width="0.1009%" height="15" fill="rgb(207,117,47)" fg:x="153" fg:w="1"/><text x="15.6890%" y="159.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.10%)</title><rect x="15.5399%" y="149" width="0.1009%" height="15" fill="rgb(249,43,39)" fg:x="154" fg:w="1"/><text x="15.7899%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (4 samples, 0.40%)</title><rect x="15.5399%" y="245" width="0.4036%" height="15" fill="rgb(209,38,44)" fg:x="154" fg:w="4"/><text x="15.7899%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (4 samples, 0.40%)</title><rect x="15.5399%" y="229" width="0.4036%" height="15" fill="rgb(236,212,23)" fg:x="154" fg:w="4"/><text x="15.7899%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.40%)</title><rect x="15.5399%" y="213" width="0.4036%" height="15" fill="rgb(242,79,21)" fg:x="154" fg:w="4"/><text x="15.7899%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.40%)</title><rect x="15.5399%" y="197" width="0.4036%" height="15" fill="rgb(211,96,35)" fg:x="154" fg:w="4"/><text x="15.7899%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.40%)</title><rect x="15.5399%" y="181" width="0.4036%" height="15" fill="rgb(253,215,40)" fg:x="154" fg:w="4"/><text x="15.7899%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.40%)</title><rect x="15.5399%" y="165" width="0.4036%" height="15" fill="rgb(211,81,21)" fg:x="154" fg:w="4"/><text x="15.7899%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.30%)</title><rect x="15.6408%" y="149" width="0.3027%" height="15" fill="rgb(208,190,38)" fg:x="155" fg:w="3"/><text x="15.8908%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.30%)</title><rect x="15.6408%" y="133" width="0.3027%" height="15" fill="rgb(235,213,38)" fg:x="155" fg:w="3"/><text x="15.8908%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.30%)</title><rect x="15.6408%" y="117" width="0.3027%" height="15" fill="rgb(237,122,38)" fg:x="155" fg:w="3"/><text x="15.8908%" y="127.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.30%)</title><rect x="15.6408%" y="101" width="0.3027%" height="15" fill="rgb(244,218,35)" fg:x="155" fg:w="3"/><text x="15.8908%" y="111.50"></text></g><g><title>realloc (3 samples, 0.30%)</title><rect x="15.6408%" y="85" width="0.3027%" height="15" fill="rgb(240,68,47)" fg:x="155" fg:w="3"/><text x="15.8908%" y="95.50"></text></g><g><title>[libc.so.6] (3 samples, 0.30%)</title><rect x="15.6408%" y="69" width="0.3027%" height="15" fill="rgb(210,16,53)" fg:x="155" fg:w="3"/><text x="15.8908%" y="79.50"></text></g><g><title>[libc.so.6] (3 samples, 0.30%)</title><rect x="15.6408%" y="53" width="0.3027%" height="15" fill="rgb(235,124,12)" fg:x="155" fg:w="3"/><text x="15.8908%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.10%)</title><rect x="15.8426%" y="37" width="0.1009%" height="15" fill="rgb(224,169,11)" fg:x="157" fg:w="1"/><text x="16.0926%" y="47.50"></text></g><g><title>core::cmp::PartialOrd::lt (1 samples, 0.10%)</title><rect x="15.9435%" y="245" width="0.1009%" height="15" fill="rgb(250,166,2)" fg:x="158" fg:w="1"/><text x="16.1935%" y="255.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.10%)</title><rect x="15.9435%" y="229" width="0.1009%" height="15" fill="rgb(242,216,29)" fg:x="158" fg:w="1"/><text x="16.1935%" y="239.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as core::cmp::Ord&gt;::cmp (1 samples, 0.10%)</title><rect x="15.9435%" y="213" width="0.1009%" height="15" fill="rgb(230,116,27)" fg:x="158" fg:w="1"/><text x="16.1935%" y="223.50"></text></g><g><title>num_bigint::biguint::algorithms::cmp_slice (1 samples, 0.10%)</title><rect x="15.9435%" y="197" width="0.1009%" height="15" fill="rgb(228,99,48)" fg:x="158" fg:w="1"/><text x="16.1935%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.10%)</title><rect x="16.0444%" y="245" width="0.1009%" height="15" fill="rgb(253,11,6)" fg:x="159" fg:w="1"/><text x="16.2944%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.10%)</title><rect x="16.0444%" y="229" width="0.1009%" height="15" fill="rgb(247,143,39)" fg:x="159" fg:w="1"/><text x="16.2944%" y="239.50"></text></g><g><title>num_bigint::biguint::BigUint::new (4 samples, 0.40%)</title><rect x="16.1453%" y="245" width="0.4036%" height="15" fill="rgb(236,97,10)" fg:x="160" fg:w="4"/><text x="16.3953%" y="255.50"></text></g><g><title>num_bigint::biguint::BigUint::normalized (4 samples, 0.40%)</title><rect x="16.1453%" y="229" width="0.4036%" height="15" fill="rgb(233,208,19)" fg:x="160" fg:w="4"/><text x="16.3953%" y="239.50"></text></g><g><title>num_bigint::biguint::BigUint::normalize (4 samples, 0.40%)</title><rect x="16.1453%" y="213" width="0.4036%" height="15" fill="rgb(216,164,2)" fg:x="160" fg:w="4"/><text x="16.3953%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.50%)</title><rect x="20.0807%" y="229" width="0.5045%" height="15" fill="rgb(220,129,5)" fg:x="199" fg:w="5"/><text x="20.3307%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (5 samples, 0.50%)</title><rect x="20.0807%" y="213" width="0.5045%" height="15" fill="rgb(242,17,10)" fg:x="199" fg:w="5"/><text x="20.3307%" y="223.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="20.5853%" y="229" width="0.1009%" height="15" fill="rgb(242,107,0)" fg:x="204" fg:w="1"/><text x="20.8353%" y="239.50"></text></g><g><title>num_bigint::biguint::algorithms::adc (1 samples, 0.10%)</title><rect x="20.6862%" y="229" width="0.1009%" height="15" fill="rgb(251,28,31)" fg:x="205" fg:w="1"/><text x="20.9362%" y="239.50"></text></g><g><title>num_bigint::biguint::monty::monty_mult (328 samples, 33.10%)</title><rect x="0.8073%" y="277" width="33.0979%" height="15" fill="rgb(233,223,10)" fg:x="8" fg:w="328"/><text x="1.0573%" y="287.50">num_bigint::biguint::monty::monty_mult</text></g><g><title>num_bigint::biguint::monty::monty_redc (186 samples, 18.77%)</title><rect x="15.1362%" y="261" width="18.7689%" height="15" fill="rgb(215,21,27)" fg:x="150" fg:w="186"/><text x="15.3862%" y="271.50">num_bigint::biguint::monty::m..</text></g><g><title>num_bigint::biguint::algorithms::mac_digit (172 samples, 17.36%)</title><rect x="16.5489%" y="245" width="17.3562%" height="15" fill="rgb(232,23,21)" fg:x="164" fg:w="172"/><text x="16.7989%" y="255.50">num_bigint::biguint::algori..</text></g><g><title>num_bigint::biguint::algorithms::mac_with_carry (130 samples, 13.12%)</title><rect x="20.7871%" y="229" width="13.1181%" height="15" fill="rgb(244,5,23)" fg:x="206" fg:w="130"/><text x="21.0371%" y="239.50">num_bigint::biguint:..</text></g><g><title>num_bigint::biguint::monty::monty_redc (1 samples, 0.10%)</title><rect x="33.9051%" y="277" width="0.1009%" height="15" fill="rgb(226,81,46)" fg:x="336" fg:w="1"/><text x="34.1551%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.10%)</title><rect x="33.9051%" y="261" width="0.1009%" height="15" fill="rgb(247,70,30)" fg:x="336" fg:w="1"/><text x="34.1551%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.10%)</title><rect x="33.9051%" y="245" width="0.1009%" height="15" fill="rgb(212,68,19)" fg:x="336" fg:w="1"/><text x="34.1551%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.10%)</title><rect x="33.9051%" y="229" width="0.1009%" height="15" fill="rgb(240,187,13)" fg:x="336" fg:w="1"/><text x="34.1551%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.10%)</title><rect x="33.9051%" y="213" width="0.1009%" height="15" fill="rgb(223,113,26)" fg:x="336" fg:w="1"/><text x="34.1551%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.10%)</title><rect x="33.9051%" y="197" width="0.1009%" height="15" fill="rgb(206,192,2)" fg:x="336" fg:w="1"/><text x="34.1551%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.10%)</title><rect x="33.9051%" y="181" width="0.1009%" height="15" fill="rgb(241,108,4)" fg:x="336" fg:w="1"/><text x="34.1551%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.10%)</title><rect x="33.9051%" y="165" width="0.1009%" height="15" fill="rgb(247,173,49)" fg:x="336" fg:w="1"/><text x="34.1551%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.10%)</title><rect x="34.1070%" y="117" width="0.1009%" height="15" fill="rgb(224,114,35)" fg:x="338" fg:w="1"/><text x="34.3570%" y="127.50"></text></g><g><title>__libc_calloc (6 samples, 0.61%)</title><rect x="34.2079%" y="117" width="0.6054%" height="15" fill="rgb(245,159,27)" fg:x="339" fg:w="6"/><text x="34.4579%" y="127.50"></text></g><g><title>[libc.so.6] (5 samples, 0.50%)</title><rect x="34.3088%" y="101" width="0.5045%" height="15" fill="rgb(245,172,44)" fg:x="340" fg:w="5"/><text x="34.5588%" y="111.50"></text></g><g><title>alloc::vec::from_elem (9 samples, 0.91%)</title><rect x="34.1070%" y="229" width="0.9082%" height="15" fill="rgb(236,23,11)" fg:x="338" fg:w="9"/><text x="34.3570%" y="239.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9 samples, 0.91%)</title><rect x="34.1070%" y="213" width="0.9082%" height="15" fill="rgb(205,117,38)" fg:x="338" fg:w="9"/><text x="34.3570%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (9 samples, 0.91%)</title><rect x="34.1070%" y="197" width="0.9082%" height="15" fill="rgb(237,72,25)" fg:x="338" fg:w="9"/><text x="34.3570%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.91%)</title><rect x="34.1070%" y="181" width="0.9082%" height="15" fill="rgb(244,70,9)" fg:x="338" fg:w="9"/><text x="34.3570%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (9 samples, 0.91%)</title><rect x="34.1070%" y="165" width="0.9082%" height="15" fill="rgb(217,125,39)" fg:x="338" fg:w="9"/><text x="34.3570%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.91%)</title><rect x="34.1070%" y="149" width="0.9082%" height="15" fill="rgb(235,36,10)" fg:x="338" fg:w="9"/><text x="34.3570%" y="159.50"></text></g><g><title>alloc::alloc::alloc_zeroed (9 samples, 0.91%)</title><rect x="34.1070%" y="133" width="0.9082%" height="15" fill="rgb(251,123,47)" fg:x="338" fg:w="9"/><text x="34.3570%" y="143.50"></text></g><g><title>__rust_alloc_zeroed (2 samples, 0.20%)</title><rect x="34.8133%" y="117" width="0.2018%" height="15" fill="rgb(221,13,13)" fg:x="345" fg:w="2"/><text x="35.0633%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="35.2170%" y="213" width="0.1009%" height="15" fill="rgb(238,131,9)" fg:x="349" fg:w="1"/><text x="35.4670%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="35.2170%" y="197" width="0.1009%" height="15" fill="rgb(211,50,8)" fg:x="349" fg:w="1"/><text x="35.4670%" y="207.50"></text></g><g><title>num_bigint::biguint::algorithms::adc (1 samples, 0.10%)</title><rect x="39.4551%" y="197" width="0.1009%" height="15" fill="rgb(245,182,24)" fg:x="391" fg:w="1"/><text x="39.7051%" y="207.50"></text></g><g><title>&lt;&amp;num_bigint::biguint::BigUint as core::ops::arith::Mul&lt;&amp;num_bigint::biguint::BigUint&gt;&gt;::mul (290 samples, 29.26%)</title><rect x="34.0061%" y="261" width="29.2634%" height="15" fill="rgb(242,14,37)" fg:x="337" fg:w="290"/><text x="34.2561%" y="271.50">&lt;&amp;num_bigint::biguint::BigUint as core::ops::ar..</text></g><g><title>num_bigint::biguint::algorithms::mul3 (290 samples, 29.26%)</title><rect x="34.0061%" y="245" width="29.2634%" height="15" fill="rgb(246,228,12)" fg:x="337" fg:w="290"/><text x="34.2561%" y="255.50">num_bigint::biguint::algorithms::mul3</text></g><g><title>num_bigint::biguint::algorithms::mac3 (280 samples, 28.25%)</title><rect x="35.0151%" y="229" width="28.2543%" height="15" fill="rgb(213,55,15)" fg:x="347" fg:w="280"/><text x="35.2651%" y="239.50">num_bigint::biguint::algorithms::mac3</text></g><g><title>num_bigint::biguint::algorithms::mac_digit (277 samples, 27.95%)</title><rect x="35.3179%" y="213" width="27.9516%" height="15" fill="rgb(209,9,3)" fg:x="350" fg:w="277"/><text x="35.5679%" y="223.50">num_bigint::biguint::algorithms::mac_digit</text></g><g><title>num_bigint::biguint::algorithms::mac_with_carry (235 samples, 23.71%)</title><rect x="39.5560%" y="197" width="23.7134%" height="15" fill="rgb(230,59,30)" fg:x="392" fg:w="235"/><text x="39.8060%" y="207.50">num_bigint::biguint::algorithms::mac_w..</text></g><g><title>__libc_free (1 samples, 0.10%)</title><rect x="63.2694%" y="261" width="0.1009%" height="15" fill="rgb(209,121,21)" fg:x="627" fg:w="1"/><text x="63.5194%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.10%)</title><rect x="63.2694%" y="245" width="0.1009%" height="15" fill="rgb(220,109,13)" fg:x="627" fg:w="1"/><text x="63.5194%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;num_bigint::biguint::BigUint&gt; (1 samples, 0.10%)</title><rect x="63.3703%" y="261" width="0.1009%" height="15" fill="rgb(232,18,1)" fg:x="628" fg:w="1"/><text x="63.6203%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (1 samples, 0.10%)</title><rect x="63.3703%" y="245" width="0.1009%" height="15" fill="rgb(215,41,42)" fg:x="628" fg:w="1"/><text x="63.6203%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (1 samples, 0.10%)</title><rect x="63.3703%" y="229" width="0.1009%" height="15" fill="rgb(224,123,36)" fg:x="628" fg:w="1"/><text x="63.6203%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="63.3703%" y="213" width="0.1009%" height="15" fill="rgb(240,125,3)" fg:x="628" fg:w="1"/><text x="63.6203%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.10%)</title><rect x="63.3703%" y="197" width="0.1009%" height="15" fill="rgb(205,98,50)" fg:x="628" fg:w="1"/><text x="63.6203%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.10%)</title><rect x="63.3703%" y="181" width="0.1009%" height="15" fill="rgb(205,185,37)" fg:x="628" fg:w="1"/><text x="63.6203%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.10%)</title><rect x="63.3703%" y="165" width="0.1009%" height="15" fill="rgb(238,207,15)" fg:x="628" fg:w="1"/><text x="63.6203%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.10%)</title><rect x="63.3703%" y="149" width="0.1009%" height="15" fill="rgb(213,199,42)" fg:x="628" fg:w="1"/><text x="63.6203%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.10%)</title><rect x="64.0767%" y="245" width="0.1009%" height="15" fill="rgb(235,201,11)" fg:x="635" fg:w="1"/><text x="64.3267%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.10%)</title><rect x="64.0767%" y="229" width="0.1009%" height="15" fill="rgb(207,46,11)" fg:x="635" fg:w="1"/><text x="64.3267%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.10%)</title><rect x="64.0767%" y="213" width="0.1009%" height="15" fill="rgb(241,35,35)" fg:x="635" fg:w="1"/><text x="64.3267%" y="223.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as core::ops::arith::Sub&lt;&amp;num_bigint::biguint::BigUint&gt;&gt;::sub (2 samples, 0.20%)</title><rect x="64.1776%" y="245" width="0.2018%" height="15" fill="rgb(243,32,47)" fg:x="636" fg:w="2"/><text x="64.4276%" y="255.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as core::ops::arith::SubAssign&lt;&amp;num_bigint::biguint::BigUint&gt;&gt;::sub_assign (2 samples, 0.20%)</title><rect x="64.1776%" y="229" width="0.2018%" height="15" fill="rgb(247,202,23)" fg:x="636" fg:w="2"/><text x="64.4276%" y="239.50"></text></g><g><title>num_bigint::biguint::algorithms::sub2 (2 samples, 0.20%)</title><rect x="64.1776%" y="213" width="0.2018%" height="15" fill="rgb(219,102,11)" fg:x="636" fg:w="2"/><text x="64.4276%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (1 samples, 0.10%)</title><rect x="64.2785%" y="197" width="0.1009%" height="15" fill="rgb(243,110,44)" fg:x="637" fg:w="1"/><text x="64.5285%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.40%)</title><rect x="64.3794%" y="181" width="0.4036%" height="15" fill="rgb(222,74,54)" fg:x="638" fg:w="4"/><text x="64.6294%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.40%)</title><rect x="64.3794%" y="165" width="0.4036%" height="15" fill="rgb(216,99,12)" fg:x="638" fg:w="4"/><text x="64.6294%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.40%)</title><rect x="64.3794%" y="149" width="0.4036%" height="15" fill="rgb(226,22,26)" fg:x="638" fg:w="4"/><text x="64.6294%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.40%)</title><rect x="64.3794%" y="133" width="0.4036%" height="15" fill="rgb(217,163,10)" fg:x="638" fg:w="4"/><text x="64.6294%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.40%)</title><rect x="64.3794%" y="117" width="0.4036%" height="15" fill="rgb(213,25,53)" fg:x="638" fg:w="4"/><text x="64.6294%" y="127.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.40%)</title><rect x="64.3794%" y="101" width="0.4036%" height="15" fill="rgb(252,105,26)" fg:x="638" fg:w="4"/><text x="64.6294%" y="111.50"></text></g><g><title>malloc (4 samples, 0.40%)</title><rect x="64.3794%" y="85" width="0.4036%" height="15" fill="rgb(220,39,43)" fg:x="638" fg:w="4"/><text x="64.6294%" y="95.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="64.6821%" y="69" width="0.1009%" height="15" fill="rgb(229,68,48)" fg:x="641" fg:w="1"/><text x="64.9321%" y="79.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="64.6821%" y="53" width="0.1009%" height="15" fill="rgb(252,8,32)" fg:x="641" fg:w="1"/><text x="64.9321%" y="63.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.10%)</title><rect x="64.6821%" y="37" width="0.1009%" height="15" fill="rgb(223,20,43)" fg:x="641" fg:w="1"/><text x="64.9321%" y="47.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 1.61%)</title><rect x="64.3794%" y="245" width="1.6145%" height="15" fill="rgb(229,81,49)" fg:x="638" fg:w="16"/><text x="64.6294%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 1.61%)</title><rect x="64.3794%" y="229" width="1.6145%" height="15" fill="rgb(236,28,36)" fg:x="638" fg:w="16"/><text x="64.6294%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 1.61%)</title><rect x="64.3794%" y="213" width="1.6145%" height="15" fill="rgb(249,185,26)" fg:x="638" fg:w="16"/><text x="64.6294%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 1.61%)</title><rect x="64.3794%" y="197" width="1.6145%" height="15" fill="rgb(249,174,33)" fg:x="638" fg:w="16"/><text x="64.6294%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 1.21%)</title><rect x="64.7830%" y="181" width="1.2109%" height="15" fill="rgb(233,201,37)" fg:x="642" fg:w="12"/><text x="65.0330%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 1.21%)</title><rect x="64.7830%" y="165" width="1.2109%" height="15" fill="rgb(221,78,26)" fg:x="642" fg:w="12"/><text x="65.0330%" y="175.50"></text></g><g><title>[libc.so.6] (12 samples, 1.21%)</title><rect x="64.7830%" y="149" width="1.2109%" height="15" fill="rgb(250,127,30)" fg:x="642" fg:w="12"/><text x="65.0330%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.10%)</title><rect x="65.9939%" y="245" width="0.1009%" height="15" fill="rgb(230,49,44)" fg:x="654" fg:w="1"/><text x="66.2439%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.10%)</title><rect x="66.0949%" y="181" width="0.1009%" height="15" fill="rgb(229,67,23)" fg:x="655" fg:w="1"/><text x="66.3449%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.10%)</title><rect x="66.0949%" y="165" width="0.1009%" height="15" fill="rgb(249,83,47)" fg:x="655" fg:w="1"/><text x="66.3449%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12 samples, 1.21%)</title><rect x="66.2967%" y="133" width="1.2109%" height="15" fill="rgb(215,43,3)" fg:x="657" fg:w="12"/><text x="66.5467%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 1.21%)</title><rect x="66.2967%" y="117" width="1.2109%" height="15" fill="rgb(238,154,13)" fg:x="657" fg:w="12"/><text x="66.5467%" y="127.50"></text></g><g><title>alloc::alloc::realloc (12 samples, 1.21%)</title><rect x="66.2967%" y="101" width="1.2109%" height="15" fill="rgb(219,56,2)" fg:x="657" fg:w="12"/><text x="66.5467%" y="111.50"></text></g><g><title>realloc (12 samples, 1.21%)</title><rect x="66.2967%" y="85" width="1.2109%" height="15" fill="rgb(233,0,4)" fg:x="657" fg:w="12"/><text x="66.5467%" y="95.50"></text></g><g><title>[libc.so.6] (12 samples, 1.21%)</title><rect x="66.2967%" y="69" width="1.2109%" height="15" fill="rgb(235,30,7)" fg:x="657" fg:w="12"/><text x="66.5467%" y="79.50"></text></g><g><title>[libc.so.6] (12 samples, 1.21%)</title><rect x="66.2967%" y="53" width="1.2109%" height="15" fill="rgb(250,79,13)" fg:x="657" fg:w="12"/><text x="66.5467%" y="63.50"></text></g><g><title>[libc.so.6] (2 samples, 0.20%)</title><rect x="67.3058%" y="37" width="0.2018%" height="15" fill="rgb(211,146,34)" fg:x="667" fg:w="2"/><text x="67.5558%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (20 samples, 2.02%)</title><rect x="66.0949%" y="213" width="2.0182%" height="15" fill="rgb(228,22,38)" fg:x="655" fg:w="20"/><text x="66.3449%" y="223.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 2.02%)</title><rect x="66.0949%" y="197" width="2.0182%" height="15" fill="rgb(235,168,5)" fg:x="655" fg:w="20"/><text x="66.3449%" y="207.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 1.92%)</title><rect x="66.1958%" y="181" width="1.9173%" height="15" fill="rgb(221,155,16)" fg:x="656" fg:w="19"/><text x="66.4458%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 1.92%)</title><rect x="66.1958%" y="165" width="1.9173%" height="15" fill="rgb(215,215,53)" fg:x="656" fg:w="19"/><text x="66.4458%" y="175.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 1.92%)</title><rect x="66.1958%" y="149" width="1.9173%" height="15" fill="rgb(223,4,10)" fg:x="656" fg:w="19"/><text x="66.4458%" y="159.50">a..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6 samples, 0.61%)</title><rect x="67.5076%" y="133" width="0.6054%" height="15" fill="rgb(234,103,6)" fg:x="669" fg:w="6"/><text x="67.7576%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (21 samples, 2.12%)</title><rect x="66.0949%" y="245" width="2.1191%" height="15" fill="rgb(227,97,0)" fg:x="655" fg:w="21"/><text x="66.3449%" y="255.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 2.12%)</title><rect x="66.0949%" y="229" width="2.1191%" height="15" fill="rgb(234,150,53)" fg:x="655" fg:w="21"/><text x="66.3449%" y="239.50">a..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.10%)</title><rect x="68.1130%" y="213" width="0.1009%" height="15" fill="rgb(228,201,54)" fg:x="675" fg:w="1"/><text x="68.3630%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.10%)</title><rect x="68.1130%" y="197" width="0.1009%" height="15" fill="rgb(222,22,37)" fg:x="675" fg:w="1"/><text x="68.3630%" y="207.50"></text></g><g><title>core::cmp::PartialOrd::lt (1 samples, 0.10%)</title><rect x="68.2139%" y="245" width="0.1009%" height="15" fill="rgb(237,53,32)" fg:x="676" fg:w="1"/><text x="68.4639%" y="255.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.10%)</title><rect x="68.2139%" y="229" width="0.1009%" height="15" fill="rgb(233,25,53)" fg:x="676" fg:w="1"/><text x="68.4639%" y="239.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as core::cmp::Ord&gt;::cmp (1 samples, 0.10%)</title><rect x="68.2139%" y="213" width="0.1009%" height="15" fill="rgb(210,40,34)" fg:x="676" fg:w="1"/><text x="68.4639%" y="223.50"></text></g><g><title>num_bigint::biguint::algorithms::cmp_slice (1 samples, 0.10%)</title><rect x="68.2139%" y="197" width="0.1009%" height="15" fill="rgb(241,220,44)" fg:x="676" fg:w="1"/><text x="68.4639%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.10%)</title><rect x="68.3148%" y="245" width="0.1009%" height="15" fill="rgb(235,28,35)" fg:x="677" fg:w="1"/><text x="68.5648%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.10%)</title><rect x="68.3148%" y="229" width="0.1009%" height="15" fill="rgb(210,56,17)" fg:x="677" fg:w="1"/><text x="68.5648%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_mul (1 samples, 0.10%)</title><rect x="68.4157%" y="245" width="0.1009%" height="15" fill="rgb(224,130,29)" fg:x="678" fg:w="1"/><text x="68.6657%" y="255.50"></text></g><g><title>num_bigint::biguint::BigUint::new (7 samples, 0.71%)</title><rect x="68.5166%" y="245" width="0.7064%" height="15" fill="rgb(235,212,8)" fg:x="679" fg:w="7"/><text x="68.7666%" y="255.50"></text></g><g><title>num_bigint::biguint::BigUint::normalized (7 samples, 0.71%)</title><rect x="68.5166%" y="229" width="0.7064%" height="15" fill="rgb(223,33,50)" fg:x="679" fg:w="7"/><text x="68.7666%" y="239.50"></text></g><g><title>num_bigint::biguint::BigUint::normalize (7 samples, 0.71%)</title><rect x="68.5166%" y="213" width="0.7064%" height="15" fill="rgb(219,149,13)" fg:x="679" fg:w="7"/><text x="68.7666%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.91%)</title><rect x="72.7548%" y="229" width="0.9082%" height="15" fill="rgb(250,156,29)" fg:x="721" fg:w="9"/><text x="73.0048%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.91%)</title><rect x="72.7548%" y="213" width="0.9082%" height="15" fill="rgb(216,193,19)" fg:x="721" fg:w="9"/><text x="73.0048%" y="223.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.40%)</title><rect x="73.6630%" y="229" width="0.4036%" height="15" fill="rgb(216,135,14)" fg:x="730" fg:w="4"/><text x="73.9130%" y="239.50"></text></g><g><title>num_bigint::biguint::algorithms::adc (2 samples, 0.20%)</title><rect x="74.0666%" y="229" width="0.2018%" height="15" fill="rgb(241,47,5)" fg:x="734" fg:w="2"/><text x="74.3166%" y="239.50"></text></g><g><title>rsamixed::rsa::rsacrypt::generate_large_prime (983 samples, 99.19%)</title><rect x="0.6054%" y="357" width="99.1927%" height="15" fill="rgb(233,42,35)" fg:x="6" fg:w="983"/><text x="0.8554%" y="367.50">rsamixed::rsa::rsacrypt::generate_large_prime</text></g><g><title>rsamixed::rsa::rsacrypt::is_prime (982 samples, 99.09%)</title><rect x="0.7064%" y="341" width="99.0918%" height="15" fill="rgb(231,13,6)" fg:x="7" fg:w="982"/><text x="0.9564%" y="351.50">rsamixed::rsa::rsacrypt::is_prime</text></g><g><title>num_bigint::bigint::BigInt::modpow (982 samples, 99.09%)</title><rect x="0.7064%" y="325" width="99.0918%" height="15" fill="rgb(207,181,40)" fg:x="7" fg:w="982"/><text x="0.9564%" y="335.50">num_bigint::bigint::BigInt::modpow</text></g><g><title>num_bigint::biguint::BigUint::modpow (982 samples, 99.09%)</title><rect x="0.7064%" y="309" width="99.0918%" height="15" fill="rgb(254,173,49)" fg:x="7" fg:w="982"/><text x="0.9564%" y="319.50">num_bigint::biguint::BigUint::modpow</text></g><g><title>num_bigint::biguint::monty::monty_modpow (982 samples, 99.09%)</title><rect x="0.7064%" y="293" width="99.0918%" height="15" fill="rgb(221,1,38)" fg:x="7" fg:w="982"/><text x="0.9564%" y="303.50">num_bigint::biguint::monty::monty_modpow</text></g><g><title>num_bigint::biguint::monty::monty_sqr (652 samples, 65.79%)</title><rect x="34.0061%" y="277" width="65.7921%" height="15" fill="rgb(206,124,46)" fg:x="337" fg:w="652"/><text x="34.2561%" y="287.50">num_bigint::biguint::monty::monty_sqr</text></g><g><title>num_bigint::biguint::monty::monty_redc (360 samples, 36.33%)</title><rect x="63.4712%" y="261" width="36.3269%" height="15" fill="rgb(249,21,11)" fg:x="629" fg:w="360"/><text x="63.7212%" y="271.50">num_bigint::biguint::monty::monty_redc</text></g><g><title>num_bigint::biguint::algorithms::mac_digit (303 samples, 30.58%)</title><rect x="69.2230%" y="245" width="30.5752%" height="15" fill="rgb(222,201,40)" fg:x="686" fg:w="303"/><text x="69.4730%" y="255.50">num_bigint::biguint::algorithms::mac_digit</text></g><g><title>num_bigint::biguint::algorithms::mac_with_carry (253 samples, 25.53%)</title><rect x="74.2684%" y="229" width="25.5298%" height="15" fill="rgb(235,61,29)" fg:x="736" fg:w="253"/><text x="74.5184%" y="239.50">num_bigint::biguint::algorithms::mac_with..</text></g><g><title>_start (984 samples, 99.29%)</title><rect x="0.6054%" y="645" width="99.2936%" height="15" fill="rgb(219,207,3)" fg:x="6" fg:w="984"/><text x="0.8554%" y="655.50">_start</text></g><g><title>__libc_start_main (984 samples, 99.29%)</title><rect x="0.6054%" y="629" width="99.2936%" height="15" fill="rgb(222,56,46)" fg:x="6" fg:w="984"/><text x="0.8554%" y="639.50">__libc_start_main</text></g><g><title>[libc.so.6] (984 samples, 99.29%)</title><rect x="0.6054%" y="613" width="99.2936%" height="15" fill="rgb(239,76,54)" fg:x="6" fg:w="984"/><text x="0.8554%" y="623.50">[libc.so.6]</text></g><g><title>main (984 samples, 99.29%)</title><rect x="0.6054%" y="597" width="99.2936%" height="15" fill="rgb(231,124,27)" fg:x="6" fg:w="984"/><text x="0.8554%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (984 samples, 99.29%)</title><rect x="0.6054%" y="581" width="99.2936%" height="15" fill="rgb(249,195,6)" fg:x="6" fg:w="984"/><text x="0.8554%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (984 samples, 99.29%)</title><rect x="0.6054%" y="565" width="99.2936%" height="15" fill="rgb(237,174,47)" fg:x="6" fg:w="984"/><text x="0.8554%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (984 samples, 99.29%)</title><rect x="0.6054%" y="549" width="99.2936%" height="15" fill="rgb(206,201,31)" fg:x="6" fg:w="984"/><text x="0.8554%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (984 samples, 99.29%)</title><rect x="0.6054%" y="533" width="99.2936%" height="15" fill="rgb(231,57,52)" fg:x="6" fg:w="984"/><text x="0.8554%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (984 samples, 99.29%)</title><rect x="0.6054%" y="517" width="99.2936%" height="15" fill="rgb(248,177,22)" fg:x="6" fg:w="984"/><text x="0.8554%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (984 samples, 99.29%)</title><rect x="0.6054%" y="501" width="99.2936%" height="15" fill="rgb(215,211,37)" fg:x="6" fg:w="984"/><text x="0.8554%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (984 samples, 99.29%)</title><rect x="0.6054%" y="485" width="99.2936%" height="15" fill="rgb(241,128,51)" fg:x="6" fg:w="984"/><text x="0.8554%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (984 samples, 99.29%)</title><rect x="0.6054%" y="469" width="99.2936%" height="15" fill="rgb(227,165,31)" fg:x="6" fg:w="984"/><text x="0.8554%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (984 samples, 99.29%)</title><rect x="0.6054%" y="453" width="99.2936%" height="15" fill="rgb(228,167,24)" fg:x="6" fg:w="984"/><text x="0.8554%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (984 samples, 99.29%)</title><rect x="0.6054%" y="437" width="99.2936%" height="15" fill="rgb(228,143,12)" fg:x="6" fg:w="984"/><text x="0.8554%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (984 samples, 99.29%)</title><rect x="0.6054%" y="421" width="99.2936%" height="15" fill="rgb(249,149,8)" fg:x="6" fg:w="984"/><text x="0.8554%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (984 samples, 99.29%)</title><rect x="0.6054%" y="405" width="99.2936%" height="15" fill="rgb(243,35,44)" fg:x="6" fg:w="984"/><text x="0.8554%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>rsamixed::main (984 samples, 99.29%)</title><rect x="0.6054%" y="389" width="99.2936%" height="15" fill="rgb(246,89,9)" fg:x="6" fg:w="984"/><text x="0.8554%" y="399.50">rsamixed::main</text></g><g><title>rsamixed::rsa::rsacrypt::processing (984 samples, 99.29%)</title><rect x="0.6054%" y="373" width="99.2936%" height="15" fill="rgb(233,213,13)" fg:x="6" fg:w="984"/><text x="0.8554%" y="383.50">rsamixed::rsa::rsacrypt::processing</text></g><g><title>rsamixed::rsa::rsacrypt::mod_inverse (1 samples, 0.10%)</title><rect x="99.7982%" y="357" width="0.1009%" height="15" fill="rgb(233,141,41)" fg:x="989" fg:w="1"/><text x="100.0482%" y="367.50"></text></g><g><title>&lt;&amp;num_bigint::bigint::BigInt as core::ops::arith::Div&lt;&amp;num_bigint::bigint::BigInt&gt;&gt;::div (1 samples, 0.10%)</title><rect x="99.7982%" y="341" width="0.1009%" height="15" fill="rgb(239,167,4)" fg:x="989" fg:w="1"/><text x="100.0482%" y="351.50"></text></g><g><title>&lt;num_bigint::bigint::BigInt as num_integer::Integer&gt;::div_rem (1 samples, 0.10%)</title><rect x="99.7982%" y="325" width="0.1009%" height="15" fill="rgb(209,217,16)" fg:x="989" fg:w="1"/><text x="100.0482%" y="335.50"></text></g><g><title>&lt;num_bigint::biguint::BigUint as num_integer::Integer&gt;::div_mod_floor (1 samples, 0.10%)</title><rect x="99.7982%" y="309" width="0.1009%" height="15" fill="rgb(219,88,35)" fg:x="989" fg:w="1"/><text x="100.0482%" y="319.50"></text></g><g><title>num_bigint::biguint::algorithms::div_rem_ref (1 samples, 0.10%)</title><rect x="99.7982%" y="293" width="0.1009%" height="15" fill="rgb(220,193,23)" fg:x="989" fg:w="1"/><text x="100.0482%" y="303.50"></text></g><g><title>&lt;&amp;num_bigint::biguint::BigUint as core::ops::bit::Shl&lt;usize&gt;&gt;::shl (1 samples, 0.10%)</title><rect x="99.7982%" y="277" width="0.1009%" height="15" fill="rgb(230,90,52)" fg:x="989" fg:w="1"/><text x="100.0482%" y="287.50"></text></g><g><title>num_bigint::biguint::algorithms::biguint_shl (1 samples, 0.10%)</title><rect x="99.7982%" y="261" width="0.1009%" height="15" fill="rgb(252,106,19)" fg:x="989" fg:w="1"/><text x="100.0482%" y="271.50"></text></g><g><title>all (991 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="991"/><text x="0.2500%" y="687.50"></text></g><g><title>rsamixed (986 samples, 99.50%)</title><rect x="0.5045%" y="661" width="99.4955%" height="15" fill="rgb(230,138,44)" fg:x="5" fg:w="986"/><text x="0.7545%" y="671.50">rsamixed</text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="99.8991%" y="645" width="0.1009%" height="15" fill="rgb(235,182,43)" fg:x="990" fg:w="1"/><text x="100.1491%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.10%)</title><rect x="99.8991%" y="629" width="0.1009%" height="15" fill="rgb(242,16,51)" fg:x="990" fg:w="1"/><text x="100.1491%" y="639.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.10%)</title><rect x="99.8991%" y="613" width="0.1009%" height="15" fill="rgb(248,9,4)" fg:x="990" fg:w="1"/><text x="100.1491%" y="623.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.10%)</title><rect x="99.8991%" y="597" width="0.1009%" height="15" fill="rgb(210,31,22)" fg:x="990" fg:w="1"/><text x="100.1491%" y="607.50"></text></g><g><title>bprm_execve (1 samples, 0.10%)</title><rect x="99.8991%" y="581" width="0.1009%" height="15" fill="rgb(239,54,39)" fg:x="990" fg:w="1"/><text x="100.1491%" y="591.50"></text></g><g><title>load_elf_binary (1 samples, 0.10%)</title><rect x="99.8991%" y="565" width="0.1009%" height="15" fill="rgb(230,99,41)" fg:x="990" fg:w="1"/><text x="100.1491%" y="575.50"></text></g><g><title>randomize_stack_top (1 samples, 0.10%)</title><rect x="99.8991%" y="549" width="0.1009%" height="15" fill="rgb(253,106,12)" fg:x="990" fg:w="1"/><text x="100.1491%" y="559.50"></text></g><g><title>get_random_u64 (1 samples, 0.10%)</title><rect x="99.8991%" y="533" width="0.1009%" height="15" fill="rgb(213,46,41)" fg:x="990" fg:w="1"/><text x="100.1491%" y="543.50"></text></g><g><title>check_preemption_disabled (1 samples, 0.10%)</title><rect x="99.8991%" y="517" width="0.1009%" height="15" fill="rgb(215,133,35)" fg:x="990" fg:w="1"/><text x="100.1491%" y="527.50"></text></g></svg></svg>